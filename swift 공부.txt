- 데이터 타입(자료형, data type)
	▪ 스위프트 프로그램에서 숫자를 저장
		- var mynumber = 10
		- mynumber라는 이름의 변수를 생성했으며, 숫자 10을 할당
		- var mynumber : Int = 10
 		- 위와 같이 초깃값이 있을 경우에는 컴파일러가 타입 추론(type inference)을 하므로 데이터 타입을 명시할 필요 없음
 	▪ Bool, Character, Int, Float, Double, String, Void
 	▪ var x : Int
 	▪ x= 10
 		⁃ // 주의 error ‘=‘ must have consistent whitespace on both sides, ‘=‘ 양쪽에 일관된 공백

- print 함수 정보 : https://developer.apple.com/documentation/swift/print(_:separator:terminator:)

- 자료형의 종류와 크기 확인
var x = 10
print(type(of:x)) 
let s = MemoryLayout.size(ofValue: x)
let t = MemoryLayout<Int>.size
print(s, t)
 
- 일반적으로 초깃값을 주지 않을 경우에만 자료형을 씀
	• var welcomeMessage: String //초깃값이 없으므로 자료형을 직접 표기함
 	• It is rare that you need to write type annotation in practice. If you provide an initial value for a constant or variable at the point that it is defined, Swift can almost always infer the type to be used for that constant or variable.
 	• let meaningOfLife = 42 // meanOfLife Int형으로 타입 추론됨
 	• let pi = 3.14159 // pi는 Double형으로 추론됨
 	• let anotherPi = 3 + 0.14159 // anotherPi는 Double형으로 추론됨

- 정수 데이터 타입 : Int
 	▪ 정수(소수점이 없는 수)를 저장하는 데 사용
 		⁃ 양수, 음수, 영(0) 값을 담을 수 있는 부호 있는(signed) 정수
 		⁃ 영(0)과 양수만 담을 수 있는 부호 없는(unsigned) 정수
 	▪ 8비트, 16비트, 32비트, 64비트 정수를 지원
 		⁃ Int8, Int16, Int32, Int64 타입
 	▪ 부호 없는 정수
 		⁃ UInt8, UInt16, UInt32, UInt64 타입
 	▪ 애플은 특정 크기의 데이터 타입 보다 Int 데이터 타입을 권장
 		⁃ Int 데이터 타입은 해당 코드가 실행되는 플랫폼에 맞는 정수 크기를 사용
 		⁃ var myAge : Int = 20 // 초깃값 20이 있으므로 : Int는 일반적으로 생략함
 	▪ 32비트 부호 있는 정수 데이터 타입에 대한 최솟값과 최댓값을 출력
 	▪ \(출력하고 싶은 변수나 상수)
 		⁃ print(“Int32 Min = \(Int32.min) Int32 Max = \(Int32.max)”)
 		⁃ Int32 Min = -2147483648 Int32 Max = 2147483647

- 부동 소수점 데이터 타입 : Double
 	▪ 소수점이 있는 숫자
 		⁃ 4353.1223
 	▪ Float와 Double 타입을 제공
 	▪ Double 타입
 		⁃ 64비트로 부동 소수점 수를 저장, 소수점 15자리 정확도
 	▪ Float 타입
 		⁃ 32비트로 부동 소수점 수를 저장, 소수점 6자리 정확도
 	▪ Double형이 기본
 	▪ var myWeight : Double
 	▪ var myWeight : Double = 58.5
 		⁃ 초깃값 58.5이 있으므로 : Double은 일반적으로 생략함

- 부울 데이터 타입 : Bool
 	▪ 참 또는 거짓(1또는 0) 조건을 처리할 데이터 타입
 	▪ Boolean 데이터 타입을 처리하기 위하여 두 개의 불리언 상수값(true/false) 사용
 		⁃ var orangesAreOrange : Bool
 		⁃ var orangesAreOrange : Bool = true
 		⁃ 초깃값 true가 있으므로 : Bool은 일반적으로 생략함 

- 문자 데이터 타입 : Character
 	▪ 문자, 숫자, 문장 부호, 심볼 같은 유니코드(Unicode) 문자 하나를 저장
 		⁃ 스위프트에서의 문자들은 문자소 묶음(grapheme cluster)의 형태로 저장
 		⁃ 문자소 묶음은 하나의 문자를 표현하기 위하여 유니코드 코드 값들로 이루어짐
 	▪ var 변수명 : Character = “초깃값”
 	▪ 주의 : 초깃값은 작은 따옴표(‘’)가 아니고 큰 따옴표(“”)
 		⁃ var myChar1 : Character
 		⁃ var myChar2 : Character = “:”
 		⁃ var myChar3 : Character = “X” // : Character 생략불가, 생략하면 String형임
 		⁃ 유니코드를 이용하여 변수에 문자 ‘X’를 할당
 		⁃ var myChar4 = “\ u{0058}” // 유니코드 형식을 이용해도됨

- 문자열 데이터 타입 : String
 	▪ 단어나 문장을 구성하는 일련의 문자
 	▪ 저장, 검색, 비교, 문자열 연결, 수정 등의 기능을 포함
 	▪ 문자열 보간(String interpolation)을 사용하여 문자열과 변수, 상수, 표현식, 함수 호출의 조합으로 만들 수도 있음
  		var userName : String = “Kim” // : String 생략하는 것이 일반적임
  		var age = 20
  		var message = “\(userName)의 나이는 \(age)입니다.”
  		print(message)

- 특수 문자 / 이스케이프 시퀀스
 	▪ 표준 문자 세트뿐만 아니라 문자열에 개행, 탭, 또는 유니코드 값과 같은 항목을 지정할 수 있는 여러 특수 문자도 있음
 	▪ 이스케이프 시퀀스(escape sequence)
 	▪ 특수 문자들은 역슬래시(\)를 접두어로 하여 구별
 	▪ var newline = “\ n” // newline
 	▪ 역슬래시로 시작되는 모든 문자는 특수 문자로 간주
 	▪ 역슬래시 문자 자체
 		⁃ var backslash = “\ \ “
 	▪ 일반적으로 많이 사용되는 특수 문자
 		⁃ \ n - 개행
 		⁃ \ r - 캐리지 리턴(carriage return)
 		⁃ \ t - 수평 탭
 		⁃ \ \ - 역슬래시
 		⁃ \ “ - 큰따옴표(문자열 선언부에 큰따옴표를 쓰고 싶을 경우에 사용됨)
 		⁃ \ ‘ - 작은따옴표(문자열 선언부에 작은따옴표를 쓰고 싶을 경우에 사용됨)
 		⁃ \ u{nn} - nn 위치에 유니코드 문자를 표현하는 두 개의 16진수가 배치되는 1바이트 유니코드 스칼라
 		⁃ \ u{nnnn} - nnnn 위치에 유니코드 문자를 표현하는 네 개의 16진수가 배치되는 2바이트 유니코드 스칼라
 		⁃ \ u{nnnnnnnn} - nnnnnnnn 위치에 유니코드 문자를 표현하는 네 개의 16진수가 배치되는 4바이트 유니코드 스칼라

- 변수 : var
 	▪ 기본적으로 변수(variable)는 프로그램에서 사용될 데이터를 저장하기 위한 메모리 공간
 	▪ 변수에 할당된 값은 변경 가능
 	▪ var myVariable = 10 // : Int
 	▪ var x = 0.0, y = 0.0, z = 0.0

- 상수 : let
	▪ 상수(constant)는 데이터 값을 저장하기 위하여 메모리 내의 명명된 공간을 제공한다는 점에서 변수와 비슷
	▪ 어떤 값이 한번 할당되면 이후에 변경될 수 없음
	▪ 상수는 코드 내에서 반복적으로 사용되는 값이 있을 경우에 유용
	▪ 코드 내에서 반복적으로 사용되는 특정 값을 매번 사용하는 것보다, 그 값을 상수에 할당한 다음 코드 내에서 참조하면 코드 읽기가 쉬워짐
		- let maximumNumber = 10
		- let π = 3.14159
		- let 🐶🐮 = "dogcow" //[Edit]-[Emoji & Symbols]
	▪ 변수나 상수 명은 영문자, 숫자, Unicode(이모티콘, 중국어, 한글 ....)도 가능

- 상수와 변수 선언하기
	▪ 변수는 var 키워드를 이용하여 선언되며, 변수를 생성할 때에 값을 가지고 초기화할 수도 있음
		- var userCount = 10
		- var userCount : Int?
	▪ 상수는 let 키워드를 사용하여 선언
		- 선언하는 시점에서 상수에 값이 할당되어 초기화되고, 할당된 값을 수정할 수 없음
		- let maxUserCount = 20
	▪ 애플은 코드의 효율성과 실행 성능을 높이기 위해서 변수(var)보다는 상수(let)를 사용하라고 권장

- 타입 어노테이션과 타입 추론
	▪ 스위프트는 타입 안전(type safe) 프로그래밍 언어
		- 변수의 데이터 타입이 식별되면 그 변수는 다른 타입의 데이터를 저장하는 데 사용될 수 없음
		- 변수가 선언된 후에도 다른 데이터 타입을 저장할 수 있는 느슨한 타입(loosely typed)의 언어와 대조적
	▪ 상수와 변수의 타입을 식별하는 방법은 두 가지
	▪ 첫 번째 방법은 변수 또는 상수가 코드 내에서 선언되는 시점에 타입 어노테이션(type annotation)을 사용하는 것
		- 변수 또는 상수 이름 다음에 타입 선언을 두면 됨
		- Int 타입의 userCount 라는 이름의 변수를 선언
		- var userCount : Int = 10 // : Int가 type annotation
	▪ 선언부에 타입 어노테이션이 없으면 스위프트 컴파일러는 상수 또는 변수의 타입을 식별하기 위하여 타입 추론(type inference) 사용
	▪ 해당 상수 또는 변수에 값이 할당되는 시점에서 그 값의 타입을 확인하고 그와 같은 타입처럼 사용
		- var signalStrength = 2.231 // var signalStrength : Double = 2.231
		- let companyName = "My Company"
		- signalStrength라는 변수를 Double 타입(스위프트 타입 추론에서 모든 부동 소수점 수는 Double 타입)
		- companyName이라는 상수는 String 타입으로 간주
	▪ 상수를 선언할 때도 타입 어노테이션을 사용하면 나중에 코드에서 값을 할당할 수 있다.
		let bookTitle: String
		var book = true
		if book {
			bookTitle = "IOS"
		} else {
			bookTitle = "Android"
		}
		print(bookTitle)
	▪ 상수에는 값을 한 번만 할당할 수 있다.
	▪ 이미 값이 할당된 상수에 다시 값을 할당하려고 시도한다면 구문 에러(syntax error)가 발생

- 튜플(Tuple)
	▪ 튜플은 스위프트 프로그래밍 언어에서 가장 강력한 기능 중 하나
	▪ 여러 값을 하나의 개체에 일시적으로 묶는 방법
	▪ 튜플에 저장되는 항목들은 어떠한 타입도 될 수 있으며, 저장된 값들이 모두 동일한 타입이어야 한다는 제약도 없음
	▪ let myTuple = (10, 12.1, "Hi")
	▪ 튜플의 요소들은 여러 다른 방법들을 사용하여 접근할 수 있음
	▪ 특정 튜플 값은 인덱스 위치를 참조하면 간단하게 접근
		- 맨 첫 번째 값은 인덱스 0
	▪ 인덱스 2 위치를 추출하고 그 값을 새로운 문자열 변수에 할당
		- let myTuple = (10, 12.1, "Hi")
		  var myString = myTuple.2
		  print(myString) // 출력되는 값은? - Hi
	▪ 단 한 줄의 코드로 튜플의 모든 값을 추출하여 변수 또는 상수에 할당
		- let myTuple = (10, 12.1, "Hi")
		- let (myInt, myFloat, myString) = myTuple
	▪ 튜플의 값을 선택적으로 추출하는 데 사용될 수 있으며, 무시하고 싶은 값에 밑줄(_)을 사용하면 그 값은 무시
		- let (myInt, _, myString) = myTuple // 부동 소수점 수는 무시
	▪ 튜플을 생성할 때 각 값에 이름을 할당할 수도 있음
		- let myTuple = (count: 10, length: 12.1, message: "Hi")
	▪ 튜플에 저장된 값에 할당된 이름은 각 값을 참조하는 데 사용
	▪ myTuple 인스턴스의 message 값을 출력하는 코드
		- print(myTuple.message)
	▪ 튜플의 가장 강력한 점은 함수에서 여러 값들을 한 번에 반환하는 것

* 옵셔널(optional)

- Int형 vs Optional Int형
	▪ 10
		- Int
			- Int형 값을 저장
	▪ Optional(10) // 이상태로는 연산할때 사용불가
		- Int?
		- Int!
			- Int형 값을 저장 or 값이 없음(nil)
	▪ https://en.wikipedia.org/wiki/Option_type
	▪ JAVA8의 Optional 클래스, Kotlin의 Nullable 타입

- 옵셔널 타입(매우 중요)
	▪ 옵셔널(optional) 데이터 타입은 다른 프로그래밍 언어에는 없는 새로운 개념
	▪ 값을 반활할 때 오류가 발생할 가능성이 있는 값은 옵셔널 타입이라는 객체로 감싸서 반환함
		- Int("100")은 100이 아닌 Optional(100)을 리턴함, print(Int("100")), Int형 initializer
		- Int("Hi")은 정수 값을 반환할 수 없음, 아무런 값도 반환할 수 없다는 의미로 nil을 반환
		- Swift에서 기본 자료형(Int, Double, String 등)은 nil값을 저장할 수 없음
		- nil도 저장하려면 옵셔널 타입으로 선언해야 함
	▪ 옵셔널 타입은 변수 또는 상수에 아무런 값이 할당되지 않는 상황을 안전하게 처리하기 위한 방법 제공
	▪ 옵셔널 타입 변수를 선언하기 위해서는 타입 선언부 뒤에 "?" 문자를 씀
		- 주의 : 변수명 뒤에 "?"하는 것 아님
	▪ index라는 이름의 옵셔널 Int 변수를 선언
		- var index: Int?
		- index 변수는 정수 값을 갖거나 아무 값도 갖지 않을 수 있음(nil)

- 옵셔널 타입 강제 언래핑(forced unwrapping) 1
	▪ 옵셔널 변수에 값이 있으면 옵셔널로 "래핑되었다(wrapped)"고 함
	▪ 옵셔널에 래핑된 값은 강제 언래핑(forced unwrapping)으로 풀어줌
		var x : Int? // 옵셔널 정수형 변수 x 선언
		var y : Int = 0
		x = 10 // 주석처리하면 nil값이 들어감
		print(x) // Optional(10)
		print(x!) // forced unwrapping해서 10이 나옴
		print(y)

- 옵셔널 타입 강제 언래핑(forced unwrapping) 2 : optional binding
	▪ 강제 언래핑하는 또 다른 방법으로, 옵셔널 바인딩(optional binding)을 이용하여 옵셔널에 할당된 값을 임시 변수 또는 상수에 할당
		if let constantname = optionalName {
			//옵셔널 변수가 값이 있다면 언래핑해서 일반 상수 constantname에 대입하고 if문 실행
			//값이 없다면 if문의 조건이 거짓이 되어 if문을 실행하지 않음
		}
		if var variablename = optionalName {
			//옵셔널 변수가 값이 있다면 언래핑해서 일반 변수 variablename에 대입하고 if문 실행
			//값이 없다면 if문의 조건이 거짓이 되어 if문을 실행하지 않음
		}

- 여러 옵셔널을 언래핑
	▪ 여러 옵셔널 변수를 한번에 언래핑하는 방법은 콤마(,) 사용
		var pet1: String?
		var pet2: String?
		pet1 = "cat"
		pet2 = "dog"
		if let firstPet = pet1, let secondPet = pet2 {
			print(firstPet, secondPet)
		} else {
			print("nil")
		}

- 두 가지 옵셔널 타입
	▪ 옵셔널이 항상 유효한 값을 가질 경우 옵셔널이 암묵적인 언래핑(implicitly unwrapping)이 되도록 선언할 수도 있음
	▪ 클래스의 아웃렛 변수 초기화에서 많이 사용(자동 생성되는 코드)
	▪ 이러한 방법으로 옵셔널이 선언된다면 강제 언래핑이나 옵셔널 바인딩을 하지 않아도 값에 접근할 수 있음
	▪ 암묵적인 언래핑으로 옵셔널을 선언하기 위해서는 선언부에 물음표(?) 대신에 느낌표(!)를 사용
		- var x : Int? //옵셔널 변수 선언방법 1
		- var y : Int! //옵셔널 변수 선언방법 2
	▪ https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html
		- You can think of an implicitly unwrapped optional as giving permission for the optional to be force-unwrapped if needed. When you use an implicitly unwrapped optional value, Swift first tries to use it as an ordinary optional value; if it can’t be used as an optional, Swift force-unwraps the value.

- Int!형을 property로 갖는 클래스
	class MyAge {
		var age : Int!
		init(age: Int) {
			self.age = age
		}
		func printAge() {
			print(age) //optional(1)
			print(age+1) //2, age! + 1 라고 쓰지 않아도 됨
			let age1 : Int = age
			print(age1) //1
			let age2 = age + 2
			print(age2) //3
		}
	}
	var han = MyAge(age:1)
	han.printAge()

- 옵셔널을 사용하는 이유
	▪ 옵셔널 타입만이 값을 갖지 않는다는 의미의 nil 값을 가질 수 있음
	▪ You set an optional variable to a valueless state by assigning it the special value nil.
	▪ nil 값을 옵셔널이 아닌 변수나 상수에 할당할 수 없음
		- var myInt = nil // error
		- var myInt : Int? = nil // ok
		- var myInt : Int? // ok, 위와 같은 코드
			- 옵셔널 변수는 초기화하지 않으며 자동으로 nil로 초기화
		- var mystring : String = nil // 유효하지 않은 코드
		- let myConstant = nil // 유효하지 않은 코드

- nil
	 ▪ 옵셔널 변수에 nil을 할당하면 값이 없는 상태가 된다.
		- var serverResponseCode: Int? = 404
		- // serverResponseCode contains an actual Int value of 404
		- serverResponseCode = nil
		- // serverResponseCode now contains no value
	▪ nil cannot be used with nonoptional constants and variables. If a constant or variable in your code needs to work with the absence of a value under certain conditions, always declare it as an optional value of the appropriate type.
	▪ 상수나 변수가 값이 없는 상태가 존재한다면 옵셔널 타입으로 선언해야 한다.

- 옵셔널 변수와 nil
	▪ If you define an optional variable without providing a default value, the variable is automatically set to nil for you:
	▪ 옵셔널 변수에 초깃값을 할당하지 않으면 자동으로 nil이 할당됨
		- var surveyAnswer: String?
		- // surveyAnswer is automatically set to nil
	▪ Swift's nil is not the same as nil in Objective-C.
	▪ In Objective-C, nil is a pointer to a nonexistent object.
	▪ In Swift, nil is not a pointer-it is the absence of a value of a certain type. Optionals of any type can be set to nil, not just object types.

- 옵셔널은 연관 값(associated value)을 갖는 enum
	▪ 열거형에서 설명함
		public enum Optional<Wrapped> {
			case none
			case some(Wrapped)
		}
		var x : Int? = 20 //.some(20)
		var y : Int? = Optional.some(10)
		var z : Int? = Optional.none
		var x1 : Optional<Int> = 30
		print(x, y, z, x1)

- If Statements and Forced Unwrapping
	▪ You can use an if statement to find out whether an optional contains a value by comparing the optional against nil. You perform this comparison with the "equal to" operator (==) or the "not equal to" operator (!=).
	▪ If an optional has a value, it is considered to be "not equal to" nil:
		if convertedNumber != nil {
			print("convertedNumber contains some integer value.")
		}
		// prints "convertedNumber contains some integer value."
	▪ Once you're sure that the optional does contain a value, you can access its underlying value by adding an exclamation mark (!) to the end of the optional's name. The exclamation mark effectively says, "I know that this optional definitely has a value; please use it." This is known as forced unwrapping of the optional's value:
		if convertedNumber != nil {
			print("convertedNumber has an integer value of \(convertedNumber!).")
		}
		// prints "convertedNumber has an integer value of 123."
	▪ 반드시 if문으로 nil이 아닌지 확인한 후 !를 이용하여 값에 접근함

- Optional Binding
	▪ You use optional binding to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable.
		- optional binding은 옵셔널이 값을 가져 상수나 변수로 가능한지 찾는 것
	▪ Optional binding can be used with if and while statements to check for a variable, as part of a single action.
	▪ Write an optional binding for an if statement as follows:
		if let constantName = someOptional {
			statements
		}
	▪ You can rewrite the possibleNumber example from the Optionals section to use optional binding rather than forced unwrapping:
		let possibleNumber = "123"
		if let actualNumber = Int(possibleNumber) {
			print("\'\(possibleNumber)\' has an integer value of \(actualNumber)")
		} else {
			print("\'\(possibleNumber)\' could not be converted to an integer")
		}
		// prints "'123' has an integer value of 123"
	▪ This code can be read as:
		- "If the optional Int returned by Int(possibleNumber) contains a value, set a new constant called actualNumber to the value contained in the optional."
		- Int(possibleNumber)로 리턴된 옵셔널 Int가 값을 가지면 actualNumber에 할당
	▪ If the conversion is successful, the actualNumber constant becomes available for use within the first branch of the if statement. It has already been initialized with the value contained within the optional, and so there is no need to use the ! suffix to access its value.
	▪ In this example, actualNumber is simply used to print the result of the conversion.
	▪ You can use both constants and variables with optional binding.
	▪ If you wanted to manipulate the value of actualNumber within the first branch of the if statement, you could write if var actualNumber instead, and the value contained within the would be made available as a variable rather than constant. 

- 클래스, 객체, 인스턴스
	▪ When an object is created by a constructor of the class, the resulting object is called an instance of the class.
	▪ 클래스로부터 만들어진 객체를 인스턴스라 한다.

- 형 변환(as로 upcasting)
	▪ 상속 관계가 있는 클래스들끼리만 타입 캐스팅 가능
	▪ 자식(부모로부터 상속받아 더 많은 것을 가지고 있음) 인스턴스를 부모로 캐스팅하는 것은 문제가 없음
	▪ as 연산자를 이용한 타입 변환(type casting)
		- 자식인스턴스 as 부모클래스 // upcasting 안전한 캐스팅. 자식이 추상화됨
		- 업캐스팅은 객체를 부모 클래스의 객체로 형 변환
		- 형 변환은 성공할 것이기 때문에 보장된 변환(guaranteed conversion)
		- UIButton은 UIControl의 자식 클래스이므로 안전하게 형 변환
		- let myButton: UIButton = UIButton()
		- let myControl = myButton as UIControl // 자식인스턴스 as 부모 클래스
		- 자식인스턴스인 myButton을 부모 클래스형으로 형 변환

- 형 변환(as! as?로 downcasting)
	▪ 다운캐스팅은 부모 인스턴스를 자식 클래스로 변환하는 데 사용
	▪ 성공 확신이 있으면 as! 키워드를 사용하며 강제 변환(forced conversion)
		- 변환이 안되면 crash
	▪ 성공 확신이 없으면 as?를 사용하여 안전하게 변환
		- 변환이 안되면 nil을 리턴하므로 옵셔널 타입으로 변환함
	▪ 부모인스턴스 as! 자식클래스 // downcasting 일반 타입으로 반환
					  // 다운캐스팅이 반드시 성공할 것이라는 확신이 있을 때
	▪ 부모인스턴스 as? 자식클래스 // downcasting 옵셔널 타입으로 반환. 확신이 없을 경우
	▪ https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html
	▪ https://www.youtube.com/watch?v=XGgaCHNH3AE
	▪ UIScrollView 객체를 UITextView 클래스로 변환하기 위해서는 다운캐스팅 작업이 필요
	▪ 다음 코드는 UIScrollView 객체를 UITextView로 다운캐스팅하기 위해서 보장된 변환인 업캐스팅 방법을 사용하고 있음
		- let myScrollView: UIScrollView = UIScrollView() // 부모 인스턴스
		- let myTextView = myScrollView as UITextView // 부모 인스턴스 as 자식클래스
	▪ 이 코드를 컴파일하면 다음과 같은 에러가 발생
		- 'UIScrollView' is not convertible to 'UITextView'
		- UIScrollView 인스턴스를 UITextView 인스턴스로 변환하는 것을 안전하게 할 수 없다.
	▪ 다운캐스팅 변환은 반드시 as!를 사용해야함
	▪ let myTextView = myScrollView as! UITextView // 부모 인스턴스 as! 자식 클래스
	▪ 다운캐스팅을 하는 또 다른 방법은 as?를 이용하여 옵셔널 바인딩을 하는 것
	▪ 만약에 변환이 성공적으로 수행된다면 지정된 타입의 옵셔널 값이 반환될 것이며, 실패했다면 옵셔널 값은 nil이 됨
		if let classB = classA as? UITextView { // 옵셔널형이므로 옵셔널 바인딩을 수행
			print("Type cast to UITextView succeeded")
		} else {
			print("Type cast to UITextView Failed")
		}

- 타입 검사(is)
	▪ is 키워드를 이용하여 값의 타입 검사(type check)
		- 지정된 객체가 MyClass라는 이름의 클래스의 인스턴스인지 검사
		- 인스턴스가 해당 클래스인가?
			- 인스턴스 is 클래스
		- if myobject is MyClass {
			// myobject는 MyClass의 인스턴스이다
		  }
			class A {}
			var a : A = A()
			if a is A {
				print("Yes")
			}

- Any와 AnyObject
	▪ AnyObject(protocol)
		- AnyObject can represent an instance of any class type.
		- 범용 타입
		- 상속관계가 아니라도 타입 캐스팅 가능한 타입
		- 어떤 클래스의 객체도 저장 가능
		- 가장 추상화된 최상위 개념(Obj-C의 id)
		- 클래스만 허용하며 구조체나 열거형은 허용하지 않음
	▪ Any
		- Any can represent an instance of any type at all, including function types.
		- 클래스, 구조체, 열거형, 함수타입도 가능
		- https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TypeCasting.html

- 연산자의 우선순위와 결합성
	▪ https://developer.apple.com/documentation/swift_standard_library/operator_declarations
	▪ https://www.programiz.com/swift-programming/operator-precedence-associativity
	▪ https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html
	▪ https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html

- 기본 할당 연산자
	▪ 할당 연산자는(=)는 두 개의 피연산자를 가짐
	▪ 왼쪽에 있는 피연산자는 값이 할당되는 변수 또는 상수이며, 오른쪽에 있는 피연산자는 할당할 값
	▪ 오른쪽 피연산자는 주로 산술식 또는 논리식을 수행하는 표현식이며, 그 결과는 왼쪽 피연산자인 변수나 상수에 할당
		- var x: Int? // 옵셔널 Int 변수를 선언함
		- var y = 10 // 일반 Int 변수를 선언하고 초기화함
		- x = 10 // 값을 x에 할당함, Optional(10)
		- x = x! + y // x+y의 결과를 x에 할당함, Optional(20)
		- x = y // y의 값을 x에 할당함, Optional(10)

- 산술 연산자
	▪ 보통 두 개의 피연산자를 받는 이항(binary) 연산자
	▪ 예외로는 값이 음수임을 가리키는 단항 마이너스 연산자(unary negative operator)인 '-'
	▪ var x = -10 // 변수 x에 -10을 할당하기 위해 사용되는 단항 '-' 연산자
	▪ x = x - 5 // x에서 5를 빼는 뺄셈 연산자
		- - (단항)	변수 또는 표현식의 값을 음수로 만듦
		- *		곱셈
		- /		나눗셈
		- +		덧셈
		- -		뺄셈
		- %		나머지 연산
	▪ 하나의 표현식 안에 여러 개의 연산자를 사용할 수 있음
		- x = y * 10 + z - 5 / 4

- 복합 할당 연산자
	▪ x = x + y
	▪ x += y
	▪ 변수 x값과 변수 y값을 더하고 그 결과를 변수 x에 저장
		- x += y	x와 y를 더하고 그 결과를 x에 할당
		- x -= y	x에서 y를 빼고 그 결과를 x에 할당
		- x *= y	x와 y를 곱하고 그 결과를 x에 할당
		- x /= y	x를 y로 나누고 그 결과를 x에 할당
		- x %= y	x를 y로 나눈 나머지를 x에 할당
		- x &= y	x와 y의 bit AND 연산 결과를 x에 할당
		- x |= y	x와 y의 bit OR 연산 결과를 x에 할당

- 증가 연산자와 감소 연산자
	▪ 단항 연산자
	▪ x = x + 1 // x변수의 값을 1 증가시킴
	▪ x = x - 1 // x변수의 값을 1 감소시킴
	▪ 위의 표현식은 x의 값을 1 증감
	▪ 이러한 방법 대신 ++ 연산자와 -- 연산자를 사용할 수도 있었음
		- x++ // x를 1 증가시킴, Swift3에서 없어짐, x+=1
		- x-- // x를 1 감소시킴, Swift3에서 없어짐, x-=1

- 비교 연산자
	▪ 비교의 결과로 불리언(Boolean) 값을 반환
		var result: Bool?
		var x = 10
		var y = 20
		result = x < y	// true
	▪ x == y	만일 x와 y가 같다면 true를 반환
	▪ x > y 	만일 x가 y보다 크면 true를 반환
	▪ x >= y	만일 x가 y보다 크거나 같다면 true를 반환
	▪ x < y	만일 x가 y보다 작다면 true를 반환
	▪ x <= y	만일 x가 y보다 작거나 같다면 true를 반환
	▪ x != y	만일 x와 y가 같지 않다면 true를 반환
	▪ == operator checks if their instance values are equal, "equal to"
	▪ === operator checks if the references point the same instance, "identical to"
		- https://developer.apple.com/documentation/swift/1538988

- 불리언(Boolean) 논리 연산자
	▪ NOT(!), AND(&&), OR(||)와 XOR(^)
	▪ NOT(!) 연산자는 불리언 값 또는 표현식의 결과를 현재와 반대로 바꿈
	▪ var flag = true // 변수는 참
	▪ var secondFlag = !flag // secondFlag는 거짓으로 설정됨
	▪ OR(||) 연산자는 두 개의 피연산자 중에 하나라도 참이면 참(true)을 반환하고, 두 개 모두 거짓이면 거짓(false)을 반환

- 범위 연산자
	▪ 닫힌 범위 연산자(closed range operator)
		- x...y
			- x에서 시작하여 y로 끝나는 범위에 포함된 숫자
		- 5...8
			- 5, 6, 7, 8
	▪ 반 열린 범위 연산자(half-open range operator)
		- x..<y
			- x부터 시작하여 y가 포함되지 않는 모든 숫자
		- 5..<8
			- 5, 6, 7
	▪ One-Sided Ranges
		- let names = ["A", "B", "C", "D"]
		  for name in names[2...] { // 2부터 끝까지
			print(name)
		  } // C
		    // D

- 삼항 연산자 ?:
	▪ 비교 연산을 빠르게 하기 위해 삼항 연산자(ternary operator)를 지원
	▪ [조건] ? [참 표현식] : [거짓 표현식]
	▪ 삼항 연산자는 [조건] 부분을 계산하여 참(true) 혹은 거짓(false)을 확인하여 결과가 참이면 [참 표현식] 부분이 실행되며, 거짓이면 [거짓 표현식] 부분을 수행
		var x = 1
		var y = 2
		print("Largest number is \(x > y ? x : y)")
			- x가 y보다 큰지를 검사하면 거짓이며, y가 사용자에게 표시 // Largest number is 2
	
- Nil-Coalescing Operator (Nil 합병연산자) ??
	▪ 옵셔널변수 ?? nil일 때 할당되는 값
	▪ 옵셔널 변수의 값이 nil이면 ?? 다음 값으로 할당됨
		let defaultColor = "black"
		var userDefinedColor: String? // defaults to nil
		var myColor = userDefinedColor ?? defaultColor // nil이므로 defaultColor인 black으로 할당됨
		print(myColor) // black
		userDefinedColor = "red"
		myColor = userDefinedColor ?? defaultColor // nil이 아니므로 원래 값인 red가 할당됨
		print(myColor) // red, 주의 optional(red)가 아님

- for문
	▪ 조건-증가(condition-increment) for 문
	▪ for-in 반복문

- 조건-증가 for문(없어진 문법)
	▪ Swift3에서 없어진 문법
	▪ Remove C-style for-loops with conditions and increments
		for 초기화; 조건식; 증감식 {
		// 실행될 구문
		}

		for var i = 0; i < 10; i += 1 { // for i in 0..<10로 수정해야 함
			print(i)
		}
	▪ https://developer.apple.com/documentation/swift/1541053-print

- for-in 반복문
	▪ for-in 반복문은 컬렉션 또는 숫자 범위 내에 있는 목록을 반복
		for 상수명 in 컬렉션 또는 범위 {
		// 실행될 코드
		}
	▪ '상수명'은 반복문이 돌면서 컬렉션 또는 범위에서 가져온 항목을 담게 될 상수
	▪ '컬렉션 또는 범위'는 반복문이 반복되면서 현재의 항목을 참조
		- 문자열 값들의 배열이거나 범위 연산, 문자들로 구성된 문자열일 수 있음
		for index in 1...5 {
			print(index)
		}
		- index라는 이름의 상수에 현재 항목이 할당되면서 시작

- _로 참조체(i) 생략 가능
	for _ in 1...5 {
		print("안녕")
	}

	for i in 1...5 {
		print("\(i) 안녕")
	}

- 배열의 항목 접근
	let names = ["Anna", "Alex", "Brian", "Jack"]
	for name in names {
		print(name)
	}
	▪ https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html

- dictionary의 항목 접근
	let numberOfLegs = ["spider" : 8, "ant" : 6, "cat" : 4]
	// dictionary는 key:value형식의 배열
	for (animalName, legCount) in numberOfLegs {
		print("\(animalName)s have \(legCount) legs")
	}
	▪ https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html

- while 반복문
	▪ for 반복문은 몇 번 정도 반복해야 할지를 이미 아는 경우에 사용하기 적합
	▪ 어떠한 조건이 되기 전에 대체 몇 번 정도 반복해야 할지를 알 수는 없지만 그 조건을 만족할 때 까지 반복해야 하는 경우 while 반복문 사용
	▪ 지정된 조건을 만족할 때까지 작업을 반복
		while 조건식 {
		// 반복 코드
		}
	▪ myCount 변수가 1000보다 크지 않을 때까지 반복, 1000이 되는 시점에 반복문이 종료
		var myCount = 0
		while myCount < 1000 {
			myCount += 1
		}
		print(myCount) // 1000

- repeat-while 반복문
	▪ swift 1.x의 do ... while 반복문을 대신하는 문
	▪ repeat ... while 반복문의 몸체는 적어도 한번은 실행
		repeat {
		//
		} while 조건식

		var i = 10
		repeat {
			i = i - 1
			print(i) // 9부터 0까지 출력됨
		} while (i > 0)

- 반복문에서 빠져나오기(break)
	▪ 반복문이 완료되는 조건 전에 반복문을 빠져나오는 어떤 조건을 만들 수도 있음
		- 특히 무한 루프를 생성할 경우
	▪ 반복문에서 빠져나오기 위하여 break 문 사용
	▪ 현재의 반복문에서 빠져나와서 반복문 바로 다음에 있는 코드를 실행
		for i in 1..<10 {
			if i > 5 break // error: expected '{' after 'if' condition
			print(i)
		}
		
		for i in 1..<10 {
			if i > 5 {
				break
			}
			print(i) // 1부터 5까지 출력됨
		}

- continue문
	▪ continue문은 반복문에서 continue문 이후의 모든 코드를 건너뛰고 반복문의 상단 시작 위치로 돌아감
		for i in 1...10 {
			if i % 2 == 0 {
				continue
			}
			print(i) // 1 3 5 7 9
		}

- if문
	if 불리언 표현식 {
	// 불리언 표현식이 참일 경우 수행될 스위프트 코드
	}
	▪ 다른 프로그래밍 언어들과는 다르게, 스위프트에서는 if문 다음의 실행 코드가 한 줄이라도 괄호({})를 필수적으로 사용해야 한다.
	▪ 기본적으로 '불리언 표현식'이 참(true)으로 판단되면 괄호로 감싸인 코드 실행
	▪ '불리언 표현식'이 거짓(false)이면 괄호로 감싸인 코드는 건너뜀
		var x = 10
		if x > 5 {
			print("5보다 큽니다")
		}

- if-else문
	▪ if문의 다른 변형으로, if 문의 표현식이 거짓(false)으로 평가될 경우에도 수행될 코드를 지정
		if 불리언 표현식 {
		// 표현식이 참일 경우 실행되는 코드
		} else {
		// 표현식이 거짓일 경우 실행되는 코드
		}

		var x = 3
		if x % 2 == 0 {
			print("짝수입니다")
		} else {
			print("홀수입니다")
		} // 홀수입니다

- 다중 if-else문
	▪ 다양한 조건을 바탕으로 결정해야 할 때 다중 if-else구문을 사용
		var num = 3
		if (num == 1 || num == 3) {
			print("당신은 남성입니다!\n")
		} else if (num == 2 || num == 4) {
			print("당신은 여성입니다!\n")
		} else {
			print("당신은 대한민국 사람이 아닙니다!\n")
		}	


- guard문(조건식이 거짓이면 실행)
	▪ guard문은 swift2에 도입된 구문
	▪ guard문은 표현식이 거짓(false)으로 판단될 경우에 수행될 else 절을 반드시 포함해야 함
		- else 절에 속한 코드는 현재의 코드 흐름을 빠져 나갈 수 있는 구문(return, break, continue, throw 구문)을 반드시 포함해야 함
		- 또는 다른 함수를 else 코드 블록 안에서 호출할 수도 있음

		guard <불리언 표현식> else {
		// 표현식이 거짓일 경우에 실행될 코드
		<코드 블록을 빠져 나갈 구문>
		}
		// 표현식이 참일 경우에 실행되는 코드는 이곳에 위치
	
	▪ guard문은 기본적으로 특정 조건에 맞지 않을 경우에 현재의 함수나 반복문에서 빠져 나갈 수 있도록 하는 '조기 출기(early exit)' 전략을 제공
	
	func multiplyByTen(value: Int?) {
		guard let number = value, number < 10 else { // 조건식이 거짓일 때 실행
			print("수가 10보다 크다.")
			return
		}
		print(number*10) // 조건식이 참일 때 실행, 주의 : number를 여기서도 사용 가능
	}
	multiplyByTen(value: 3) // 30
	▪ guard문은 값을 언래핑(unwrapping)하기 위해서 옵셔널 바인딩을 이용하며, 그 값이 10보다 작은지 검사
		- 변수를 언래핑할 수 없거나 그 값이 10보다 크면, else절이 실행되어 에러 메세지가 출력되며, 이 함수에서 빠져 나가도록 return문이 실행
		- 10보다 작은 값이면, guard문 아래에 있는 코드가 실행되어 그 값에 10이 곱해진 값이 출력된다.
	▪ 언래핑된 number 변수를 guard문 밖에 있는 코드가 사용할 수 있다.
	▪ if문을 이용하여 언래핑된 변수는 그렇게 못함

- if let vs guard let
	func printName(firstName:String, lastName:String?) {
		if let lName = lastName { // if let
			print(lName, firstName)
		} else {
			print("성이 없네요!")
		}

		guard let lName = lastName else { // guard let
			print("성이 없네요!")
			return
		}
		print(lName, firstName)
		}
		
		printName(fistName: "길동", lastName: "홍")

- switch-case문
	switch 표현식
	{
		case match1:
			구문
		case match2:
			구문
		case match3, match4:
			구문
		default:
			구문
	} // 주의 : 각 case문 마지막에 break가 자동으로 들어 있음

- switch-case문 결합하기
	▪ 여러 가지 다른 경우에 대해서 동일한 코드를 실행해야 할 경우가 있다.
	▪ 실행될 공통 코드로 그룹 case 문을 만들 수 있다.
		var value = 3
		var days : Int = 0
		switch(value) {
			case 1,3,5,7,8,10,12:
				print("31일 입니다.")
			case 4,6,9,11:
				print("30일 입니다.")
			case 2:
				print("28 or 29일 입니다.")
			default:
				print("월을 잘못 입력하셨습니다.")
		}

- switch-case에서 where절 사용하기
	▪ where절을 switch-case에 부가적인 조건을 추가하기 위하여 사용
	▪ 값이 속하는 범위뿐만 아니라 그 숫자가 홀수인지 짝수인지도 검사
		var temperature = 60
		switch(temperature) {
			case 0...49 where temperature % 2 == 0:
				print("Cold and even")
			case 50...79 where temperature % 2 == 0:
				print("Warm and even")
			case 80...110 where temperature % 2 == 0:
				print("Hot and even")
			default:
				print("Temperature out of range or odd")
		}

- fallthrough
	▪ C/C++, 오브젝티브-C와 같은 언어와 달리 case문 다음에 break문을 포함할 필요가 없다.
	▪ 다른 언어들과는 다르게, 스위프트는 일치하는 case문을 만나면 자동으로 빠져나온다.
	▪ case별로 빠져 나가지 않고 아래로 계속 내려가게 하려면 fallthrough문을 사용한다.
		var value = 4
		switch(value) {
			case 4:
				print("4")
				fallthrough
			case 3:
				print("3")
				fallthrough
			case 2:
				print("2")
				fallthrough
			default:
				print("1")
		}

- 함수
	▪ 특정 작업을 수행하는 코드 블록
	▪ 수행하기 위하여 데이터가 제공될 수 있으며, 함수를 호출한 코드에 작업한 결과를 반환할 수도 있음
	▪ 매개변수(parameter,인자)와 인수(argument)는 차이점이 있음
	▪ https://en.wikipedia.org/wiki/Parameter_(computer_programming)
		- The terms parameter and argument may have different meanings in different programming languages. Sometimes they are used interchangeably, and the context is used to distinguish the meaning. The term parameter (sometimes called formal parameter) is often used to refer to the variable as found in the function definition, while argument (sometimes called actual parameter) refers to the actual input supplied at function call.
	▪ 함수 정의부의 값을 매개변수, 호출시의 값은 아규먼트라고 부름
	▪ https://docs.swift.org/swift-book/LanguageGuide/Functions.html

- 메서드(method)
	▪ 특정 클래스, 구조체, 열거형 내의 함수
	▪ 함수를 스위프트 클래스 내에 선언하면 메서드라 부름

- 함수를 선언하는 방법
	func <함수명> (<매개변수 이름>: <매개변수 타입>, <매개변수 이름>: <매개변수 타입>, ...) -> <반환값 타입> {
		// 함수 코드
	}
	▪ func - 함수라는 것을 스위프트 컴파일러에게 알려주는 키워드
	▪ <함수명> - 함수에 할당되는 이름
	▪ <매개변수 이름> - 함수 코드 내에서 참조되는 매개변수의 이름
	▪ <매개변수 타입> - 함수에 전달되는 매개변수의 타입
	▪ <반환값 타입> - 함수가 반환하는 결과에 대한 데이터 타입. 반환하지 않으면(Void) 반환값 타입(Void)과 ->는 생략 가능
	
	▪ 매개변수를 받지 않으며 결과를 반환하지도 않고 오직 메시지만 출력
		func sayHello() { // 리턴값 없으면( -> Void ) 지정하지 않아도 됨
			print("Hello")
		}
		void sayHello() { // C, C++
			printf("Hello");
		}

	▪ 하나의 문자열과 하나의 정수를 매개변수로 받아서 문자열을 반환
		func message(name: String, age: Int) -> String {
			return("\(name) \(age)")
		}

- 스위프트 함수 정의와 호출하기
	▪ <함수명> (<인자1>, <인자2>, ...)
		func sayHello() { // -> Void
			print("Hello")
		}
		sayHello() // 호출

- 내부 매개변수 이름과 외부 매개변수 이름
	func add(first x: Int, second y: Int) -> Int {
		// 외부 내부: 자료형, 외부 내부: 자료형 -> 리턴형
		return(x+y) // 함수 정의할 때는 내부 매개변수명을 사용
	} // return(first+second)는 오류
	add(first:10, second:20) // add(x:10, y:20)은 오류
	// 함수 호출할 때는 외부 매개변수명을 사용
	// 외부 매개변수명 생략하면 내부 매개변수명이 외부 매개변수명까지 겸함

	func add(_ x: Int, _ y: Int) -> Int { // 외부매개변수명 생략한다는 의미, 다른 언어처럼 호출 가능하지만 추천하지 않음
		return(x+y)
	}
	print(add(10, 20))

	func add(_ x: Int, with y: Int) -> Int { // 첫번째 외부매개변수명만 생략하는 경우가 많음, Objective-C언어의 호출방식이 이러함, 두번째 매개변수부터는 외부매개변수 사용
		return(x+y)
	}
	print(add(10, with:20))

- 디폴트 매개변수(아규먼트) 정의하기
	▪ argument로 전달하는 값이 없는 경우, 디폴트 매개변수 값을 사용
	▪ 함수를 선언할 때 매개변수에 디폴트 값을 할당
	▪ 이름이 인자로 전달되지 않을 경우에 디폴트로 "Kim"이라는 문자열이 사용되도록 함
		func sayHello(count: Int, name: String = "길동") -> String {
			return("\(name), 너의 번호는 \(count)")
		}
	▪ 이제 이 함수는 고객 이름 값을 전달하지 않고도 호출할 수 있다.
		var message = sayHello(count:100)
		print(message) // 길동, 너의 번호는 100
	▪ 고객 이름을 가지고 함수를 호출하면 argument를 참조
		var message = sayHello(count:10, name:"소프트")
		// 소프트, 너의 번호는 10

- 함수로부터 여러 개의 결과 반환하기
	▪ 함수는 여러 결과 값들을 튜플로 감싸서 반환할 수 있음
	▪ 인치 단위의 수를 매개변수로 받아 야드, 센티미터, 미터로 변환하고 이 세 개의 값을 하나의 튜플에 넣어 반환
		func converter(length: Float) -> (yards: Float, centimeters: Float, meters: Float) {
			let yards = length * 0.0277778
			let centimeters = length * 2.54
			let meters = length * 0.0254
			return(yards, centimeters, meters)
		}
		var lengthTuple = converter(length:20)
		print(lengthTuple.yards)
		print(lengthTuple.centimeters)
		print(lengthTuple.meters)

- 가변 매개변수(varuadic parameter)
	▪ 함수가 지정된 데이터 타입으로 0개 또는 그 이상의 매개변수를 받는다는 것을 가리키기 위해서 세 개의 점(...)을 이용하여 선언
	▪ 지정되지 않은 개수의 String값을 매개변수로 받아서 콘솔에 출력
		func displayStrings(strings: String...) {
			for string in strings {
				print(string)
			}
		}
		displayStrings(strings: "일", "이", "삼", "사")
		displayStrings(strings: "one", "two")

- inout매개변수: call by reference 구현
	▪ Swift는 기본적으로 call by value
	▪ Swift에서 call by reference를 구현하는 방법
	▪ 함수가 값을 반환한 후에도 매개변수에 일어난 변화를 유지하려면, 함수의 선언부에서 매개변수를 입출력 매개변수(in-out parameter)로 선언해야 함

- 함수를 매개변수로 사용
	▪ 스위프트는 함수를 데이터 타입처럼 처리할 수 있음
	▪ 다음과 같이 함수를 상수 또는 변수에 할당하는 것이 가능
		func inchesToFeet(inches: Float) -> Float {
			return inches * 0.0833333
		}
		let toFeet = inchesToFeet // 함수를 자료형처럼 사용
	▪ 함수를 호출하려면 원래의 함수 이름 대신에 상수 이름을 이용하여 호출 가능
		var result = toFeet(10) // inchesToFeet(10)
	▪ 어떤 함수에 다른 함수를 인자로 넘겨주거나 함수의 반환 값으로 함수를 넘겨줄 수 있음
		- 스위프트 함수는 1급 객체(first class object) 또는 1급 시민(first class citizen)
	▪ 위 함수는 Float형 매개변수, Float형 결과를 반환하기 때문에 함수의 데이터 타입(자료 형)
		(Float) -> Float // (매개변수형) -> 리턴형
	▪ Int와 Double형을 매개변수로 받아서 String을 반환하는 함수의 데이터 타입
		(Int, Double) -> String // (매개변수형, 매개변수형) -> 리턴형
	▪ 매개변수로 함수를 받으려면, 함수를 받게 될 함수는 함수의 데이터 타입을 선언함
		func addTwoInteger(x: Int, y: Int) -> Int {
			return(x+y)
		}

- 함수를 매개변수나 리턴값으로 사용
	▪ Swift의 함수는 1급 객체이다.
		- 변수에 저장할 수 있다.
		- 매개변수로 전달할 수 있다.
		- 리턴값으로 사용할 수 있다.
	
	func inchesToFeet(inches: Float) -> Float {
		return inches * 0.0833333
	}
	func inchesToYards(inches: Float) -> Float {
		return inches * 0.0277778
	}
	let toFeet = inchesToFeet
	let toYards = inchesToYards
	▪ 단위를 반환하고 콘솔에 결과를 출력하는 다른 함수
		func outputConversion(converterFunc: (Float) -> Float, value: Float) { // 함수를 매개변수로 사용
			let result = converterFunc(value)
			print("Result= \(result)")
		}
	▪ outputConversion 함수를 호출할 때 선언된 데이터 타입과 일치하는 함수를 전달
	▪ 매개변수로 적절한 변환 함수를 전달하면 인치를 피트 또는 야드로 변환하기 위하여 동일한 함수가 호출될 수 있음
		outputConversion(converterFunc: toYards, value: 10) // 야드로 변환하는 inchesToYards함수 호출
		outputConversion(converterFunc: toFeet, value: 10) // 피트로 변환하는 inchesToFeet함수 호출
	▪ 반환 타입으로 함수의 타입을 선언하면 함수도 반환될 수 있음
	▪ 다음 함수는 Boolean 매개변수의 값에 따라 toFeet 함수 또는 ToYards 함수를 반환
		func decideFunction(feet: Bool) -> (Float) -> Float { // 매개변수형 리턴형이 함수형
			if feet {
				return toFeet
			} else {
				return toYards
			}
		}